datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  orders        Order[] 
  reviews       Review[] 
  hashedPassword String?
  // Optional for WebAuthn support
 
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role Role @default(USER)
}

model Product{
  id  String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  price Float
  brand String
  category String
  inStock Boolean
  images Image[]
  reviews Review[]
}

model Review{
  id  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  productId String @db.ObjectId
  rating Int
  comment String
  createdDate DateTime @default(now())
  
  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order{
  id  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  amount Float
  currency String
  status String
  deliveryStatus String?
  createDate DateTime @default(now())
  paymentIntentId String @unique
  products CartProductType[]
  address Address?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type Image {
  color String
  colorCode String
  image String
}

type CartProductType  {
  id String
  name String
  description String
  category String
  brand String
  selectedImg Image
  quantity Float
  price Float
}

type Address{
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
}


enum Role {
   USER
   ADMIN 
}
 
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
 @@map("accounts")
}
 


 
